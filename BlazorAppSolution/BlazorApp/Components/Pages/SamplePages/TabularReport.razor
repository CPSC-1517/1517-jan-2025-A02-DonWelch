@page "/report"
<PageTitle>Tabular Report</PageTitle>
@rendermode InteractiveServer

<!-- add additional namespaces if needed-->
@using OOPsReview;

<h1>Employment History</h1>
<h4>using a scrolling Tabular Report</h4>

<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:gainsboro;">
            <p>
                This component will demonstrate how to create a tabular report. It will demostrate using bootstrap
                scrolling on your table. The page will demonstrate File I/O reading. The files records will be
                placed in a collection based on a class definition. The processing will handle: good records, badly
                format records and an empty file.
            </p>
         
        </blockquote>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(feedBackMsg))
{
    <div class="alert alert-success">
        <p>@feedBackMsg</p>
    </div>
}

@if (errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errorMsgs)
            {
                <!--
                this is a List collection there is only
                one component, the string
                therfore you would NOT need the .Value
                -->
                <li>@error</li>
            }
        </ul>
    </div>
}

<!--
    display area

    3 possible scenarios
    a) no physical collection has been created
            - no table should be display on the page
    b) collection physically exists but is empty
            - a message should be displayed to the user
    c) collection physically exists and has records to display
            - the records should be display in the desire output format.
-->

@if(employments == null)
{
   <!-- a --> 
   <p>Open an employment history file.</p>
}
else if (employments.Count == 0)
{
    <!-- b -->
    <p>No data in the employment history file.</p>
}
else
{
    <!-- c -->
    //to reduce the number of data rows being displayed there are two techniques
    //a) pagination
    //b) scrolling

    //this example uses the quick and easy technique of scrolling
    //Note the table is surrounded by a div tag
    //     on the div tag is 2 parameters
    //      the class causes the scroll (built into bootstrap)
    //      the style specifies the height of the display area

    //depending on the zoom of window you may seem to lose some of the last line
    <div  class="row">
        <div class="offset-3 col-md-6 overflow-scroll" style="height:350px;">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Level</th>
                        <th>Start Date</th>
                        <th>Years</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(Employment item in employments)
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.Level</td>
                            <td>@item.StartDate</td>
                            <td>@item.Years</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
@code {
    private string feedBackMsg = "";

    //could be using a List<string> as well as this Dictionary
    private List<string> errorMsgs = new ();

    //this variable will hold the employment history instances (records)
    private List<Employment> employments = null;

    //this variable will be used to create the instance for the collection
    private Employment employment = null;

    private Exception GetInnerException(Exception ex)
    {
        //drill down into your Exception until there are no more inner exceptions
        //at this point you will have the "real" reason for the error
        while (ex.InnerException != null)
            ex = ex.InnerException;

        //you now have the real reason for your error (details)
        //return the details to the call
        return ex;
    }

    protected override void OnInitialized()
    {
        //you could place the coding for reading your file directly
        //  within this method
        Reading();
        base.OnInitialized();
    }

    private void Reading()
    {
        //clear out any old messages
        feedBackMsg = "";
        errorMsgs.Clear();

        //there are a couple of ways to refer to your file and its path
        //  i) obtain the root path of your application using an injection
        //      service called IWebHostEnvironment via property injection (see variables)
        //  ii) use relative addressing starting a the top of your application

        //on this page we will demo (ii)
        //this addressing of the required file will start at the top
        //  of your web application
        //syntax: @"./folderpathroute/.../.../filename"

        //how can one setup the filenames for testing
        //hard-code the names
        //string filename = @"./Data/Employment.csv";
        //string filename = @"./Data/EmploymentEmpty.csv";
        //string filename = @"./Data/EmploymentBad.csv";
        //string filename = @"./Data/FileDoesNotExist.csv"; //bad filename

        //create an array
        string filePathName = @"./Data/";
        string[] filenames = new string[]
        {
            "Employment.csv", "EmploymentEmpty.csv", "EmploymentBad.csv", "FileDoesNotExist.csv"
        };

        string filename = $@"{filePathName}{filenames[2]}";

        //The System.IO.File method ReadAllLines() will return an array
        //  of lines as strings where each array element represents a
        //  line in the file
        Array userdata = null;

        //can system error occur: YES
        //whenever you are dealing with possible system errors or other class errors
        //  you should user "user friendly error handling"
        try
        {
            //consider checking to see if the file exists
            if(System.IO.File.Exists(filename))
            {
                //create your collection instance
                employments = new List<Employment>();

                //the file exists, read the file
                userdata = System.IO.File.ReadAllLines(filename);

                //traverse the array (lines from the file)
                //ensure that there is sufficient data on the line to create the required instance
                //if not: throw an FormatException
                //if so: create an instance of the required class definition
                //       add the instance to the collection
                foreach(string line in userdata)
                {
                    //create an instance of employment
                    employment = Employment.Parse(line);

                    //add the instance to the collection
                    employments.Add(employment);
                }
            }
            else
            {
                throw new Exception($"file {filename} does not exist.");
            }
        }
        catch (ArgumentNullException ex)
        {
            errorMsgs.Add($"Missing Data: {GetInnerException(ex).Message}");

        }
        catch (ArgumentException ex)
        {
            errorMsgs.Add($"Data value: {GetInnerException(ex).Message}");

        }
        catch (Exception ex)
        {
            errorMsgs.Add($"System Error: { GetInnerException(ex).Message}");

        }
    }
}
